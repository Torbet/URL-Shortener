{"version":3,"sources":["serviceWorker.js","index.jsx"],"names":["Boolean","window","location","hostname","match","inputStyle","width","marginLeft","marginTop","padding","buttonStyle","height","fontSize","socket","WebSocket","App","React","useState","value","setValue","slug","setSlug","onmessage","data","TextField","className","label","variant","style","inputProps","InputLabelProps","onChange","e","target","handleChange","Button","onClick","str","RegExp","test","send","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCTAC,G,MAAa,CACfC,MAAO,MACPC,WAAY,MACZC,UAAW,MACXC,QAAS,SAEPC,EAAc,CAChBJ,MAAO,MACPK,OAAQ,MACRJ,WAAY,QACZC,UAAW,MACXI,SAAU,QAKVC,EAAS,IAAIC,UAAU,yBAE3B,SAASC,IAAO,IAAD,EAEeC,IAAMC,SAAS,IAF9B,mBAEJC,EAFI,KAEGC,EAFH,OAGaH,IAAMC,SAAS,IAH5B,mBAGJG,EAHI,KAGEC,EAHF,KAiCX,OAJAR,EAAOS,UAAY,SAASC,GACxBF,EAAQ,yBAA2BE,EAAKA,OAIxC,6BACI,6CACA,kBAACC,EAAA,EAAD,CAAWC,UAAU,QAAQC,MAAM,aAAaC,QAAQ,SAASC,MAAOvB,EAAYwB,WAAY,CAACD,MAAO,CAAChB,SAAU,SAAUkB,gBAAiB,CAACF,MAAO,CAAChB,SAAU,OAAQH,QAAS,SAAUsB,SAAU,SAACC,GAAD,OArB9M,SAAsBA,GAClBb,EAASa,EAAEC,OAAOf,OAoB+LgB,CAAaF,MAC1N,kBAACG,EAAA,EAAD,CAAQR,QAAQ,YAAYC,MAAOlB,EAAa0B,QAnBxD,WAbA,IAAkBC,EAcS,IAdTA,EAcDnB,IAbC,IAAIoB,OAAO,wKAKF,KACNC,KAAKF,IAQlBxB,EAAO2B,KAAKtB,GAIZG,EAAQ,4BAaR,WAGA,4BAAKD,IAKjBqB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC5B,EAAD,OAEJ6B,SAASC,eAAe,SDuDtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6269dbe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\n\nimport './styles.css'\n\nconst inputStyle = {\n    width: '70%',\n    marginLeft: '15%',\n    marginTop: '2vh',\n    padding: '0.5%'\n}\nconst buttonStyle = {\n    width: '20%',\n    height: '7vh',\n    marginLeft: '15.5%',\n    marginTop: '2vh',\n    fontSize: '150%'\n}\n\n//const wshost = window.location.origin.replace(/^http/, 'ws')\n\nvar socket = new WebSocket('ws://81.141.3.17:8000');\n\nfunction App() {\n\n    const [value, setValue] = React.useState('')\n    const [slug, setSlug] = React.useState('')\n\n    function validURL(str) {\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n          '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n          '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n          '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n          '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n          '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n        return !!pattern.test(str);\n    }\n\n    function handleChange(e) {\n        setValue(e.target.value)\n    }\n    function onClick() {\n        if (validURL(value) == true) {\n            socket.send(value)\n        }\n\n        else {\n            setSlug('please enter valid url')\n        }\n        \n    }\n\n    socket.onmessage = function(data) {\n        setSlug(\"https://url.torbet.co/\" + data.data)\n    }\n\n    return (\n        <div>\n            <h1>URL Shortener</h1>\n            <TextField className='input' label=\"Enter URL:\" variant=\"filled\" style={inputStyle} inputProps={{style: {fontSize: '200%'}}} InputLabelProps={{style: {fontSize: '150%', padding: '0.5%'}}} onChange={(e) => handleChange(e)} />\n            <Button variant=\"contained\" style={buttonStyle} onClick={onClick}>\n                Primary\n            </Button>\n            <h1>{slug}</h1>\n        </div>\n    )\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}